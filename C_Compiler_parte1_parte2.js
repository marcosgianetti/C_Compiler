/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var C_Compiler_parte1_parte2 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,6],$V2=[1,21],$V3=[1,16],$V4=[1,20],$V5=[1,23],$V6=[1,17],$V7=[1,18],$V8=[1,19],$V9=[1,28],$Va=[1,29],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[1,33],$Vf=[1,34],$Vg=[5,8,10,15,16,22,32,33,34,35,36,41,42,43,44,68,69,70],$Vh=[5,8,10,15,16,22,27,31,32,33,34,35,36,41,42,43,44,68,69,70],$Vi=[5,8,9,10,15,16,22,24,27,31,32,33,34,35,36,41,42,43,44,68,69,70],$Vj=[1,52],$Vk=[1,60],$Vl=[1,59],$Vm=[1,61],$Vn=[1,62],$Vo=[1,57],$Vp=[1,58],$Vq=[1,63],$Vr=[1,64],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[1,68],$Vw=[9,24],$Vx=[1,70],$Vy=[33,47],$Vz=[9,24,54],$VA=[2,48],$VB=[1,83],$VC=[9,24,51,54],$VD=[1,84],$VE=[1,93],$VF=[1,89],$VG=[1,90],$VH=[1,91],$VI=[1,98],$VJ=[23,33,37,38,39,47],$VK=[33,37,38,39],$VL=[9,24,49,51,54],$VM=[1,128],$VN=[1,129],$VO=[1,126],$VP=[1,127],$VQ=[9,24,29,33,47,54,58,60,61,68,69,70],$VR=[1,135],$VS=[23,33,37,38,39],$VT=[1,185],$VU=[1,187],$VV=[9,24,47,54,58,60,61];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"corpo":3,"statements":4,"EOF":5,"statement":6,"exp_stmt":7,"BREAK":8,";":9,"CONTINUE":10,"if_stmt":11,"loop_stmt":12,"switch_stmt":13,"statement_composto":14,"{":15,"}":16,"declaracao_variavel":17,"declaracao_funcao":18,"expressao_atribuicao":19,"expressao_condicional":20,"chamada_funcao":21,"IF":22,"(":23,")":24,"ELSE":25,"cases":26,"CASE":27,"valor_lit":28,":":29,"default_stmt":30,"DEFAULT":31,"SWITCH":32,"IDF":33,"WHILE":34,"FOR":35,"DO":36,"F_LIT":37,"INT_LIT":38,"CHAR_LIT":39,"tipo_var":40,"INT":41,"DOUBLE":42,"FLOAT":43,"CHAR":44,"declaracao":45,"inicializacao_variavel":46,"*":47,"declaracao_list":48,"[":49,"]":50,"=":51,"expressao_aritmetica":52,"definicao_parametros":53,",":54,"passagem_parametros":55,"operador_atribuicao":56,"expressao_in_decrement":57,"/":58,"%":59,"+":60,"-":61,"expressao_aritmetica_list":62,"operador_aritmetico":63,"operador_relacional":64,"operacao_and":65,"operacao_or":66,"operacao_not":67,"AND":68,"OR":69,"NOT":70,"expressao_logica":71,"LE":72,"GE":73,"EQ":74,"NE":75,">":76,"<":77,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"BREAK",9:";",10:"CONTINUE",15:"{",16:"}",22:"IF",23:"(",24:")",25:"ELSE",27:"CASE",29:":",31:"DEFAULT",32:"SWITCH",33:"IDF",34:"WHILE",35:"FOR",36:"DO",37:"F_LIT",38:"INT_LIT",39:"CHAR_LIT",41:"INT",42:"DOUBLE",43:"FLOAT",44:"CHAR",47:"*",49:"[",50:"]",51:"=",54:",",58:"/",59:"%",60:"+",61:"-",68:"AND",69:"OR",70:"NOT",71:"expressao_logica",72:"LE",73:"GE",74:"EQ",75:"NE",76:">",77:"<"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[14,3],[14,2],[7,2],[7,1],[7,2],[7,2],[7,2],[11,9],[11,7],[26,4],[26,5],[26,1],[30,3],[13,7],[12,7],[12,7],[12,7],[12,6],[12,7],[12,6],[12,7],[12,7],[12,6],[12,7],[12,6],[12,9],[28,1],[28,1],[28,1],[40,1],[40,1],[40,1],[40,1],[17,2],[17,3],[45,2],[45,1],[48,1],[48,3],[48,4],[46,2],[46,2],[46,2],[46,3],[18,7],[18,8],[18,5],[18,6],[53,1],[53,3],[21,4],[21,3],[55,1],[55,1],[55,3],[55,3],[19,3],[19,3],[19,3],[19,4],[19,6],[19,1],[56,1],[56,2],[56,2],[56,2],[56,2],[56,2],[57,3],[57,3],[52,1],[52,3],[62,3],[62,3],[62,3],[62,3],[63,1],[63,1],[63,1],[63,1],[20,4],[20,3],[20,4],[20,3],[20,2],[20,1],[20,1],[65,1],[66,1],[67,2],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log(1)
break;
case 5:
console.log('Break Statement')
break;
case 6:
console.log('Continue Statement')
break;
case 9:
console.log('SWITCH Statement')
break;
case 11: case 12:
console.log('COMPOSTO')
break;
case 13:
console.log('Declaração de variável')
break;
case 14:
console.log('Declaração de função')
break;
case 15: case 67: case 68: case 69:
console.log('Atribuição de valor')
break;
case 16:
console.log('Expressao condicional')
break;
case 17:
console.log('Chamada de função')
break;
case 18:
console.log('IF ELSE')
break;
case 19:
console.log('IF')
break;
case 20:
console.log('Case Statement Simples')
break;
case 21:
console.log('Case Statement Multiplo')
break;
case 22:
console.log('Default')
break;
case 25:
console.log('WHILE Statement')
break;
case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35:
console.log('FOR Statement')
break;
case 36:
console.log('DO WHILE statement')
break;
case 40:
console.log('int')
break;
case 41:
console.log('double')
break;
case 42:
console.log('float')
break;
case 43:
console.log('char')
break;
case 70:
console.log('Atribuição de ponteiro')
break;
case 71:
console.log('Atribuição de Função')
break;
case 79:
console.log('Incremento ++')
break;
case 80:
console.log('Decremento --')
break;
case 106:
console.log('Operador relacional')
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},{1:[3]},{5:[1,35],6:36,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},o($Vg,[2,3]),o($Vh,[2,4]),{9:[1,37]},{9:[1,38]},o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),{9:[1,39]},o($Vi,[2,14]),{9:[1,40]},{9:[1,41]},{9:[1,42]},{23:[1,43]},{23:[1,44]},{23:[1,45]},{15:[1,46]},{23:[1,47]},{4:48,6:3,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,16:[1,49],17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},{33:[1,51],45:50,47:$Vj,48:53},{23:[1,56],47:$Vk,51:$Vl,56:54,58:$Vm,59:$Vn,60:$Vo,61:$Vp,64:55,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv},o($Vw,[2,72]),{20:69,33:$Vx,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},o($Vw,[2,96]),o($Vw,[2,97]),o($Vy,[2,40]),o($Vy,[2,41]),o($Vy,[2,42]),o($Vy,[2,43]),o([33,68,69,70],[2,98]),o($Vw,[2,99]),{71:[1,71]},{1:[2,1]},o($Vg,[2,2]),o($Vh,[2,5]),o($Vh,[2,6]),o($Vi,[2,13]),o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),{20:72,33:$Vx,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},{20:73,33:$Vx,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},{7:74,9:[1,75],17:11,18:12,19:13,20:14,21:15,33:$V5,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},{6:76,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},{33:[1,77]},{6:36,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,16:[1,78],17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},o($Vh,[2,12]),o($Vz,[2,44],{46:79,51:[1,80]}),o([9,49,51],$VA,{23:[1,81]}),{33:$VB,48:82},o($VC,[2,47],{49:$VD}),{23:$VE,28:85,33:[1,86],37:$VF,38:$VG,39:$VH,47:[1,88],52:87,62:92},{28:95,33:[1,94],37:$VF,38:$VG,39:$VH},{24:[1,97],28:99,33:$VI,37:$VF,38:$VG,39:$VH,55:96},{51:[1,101],60:[1,100]},{51:[1,103],61:[1,102]},o($VJ,[2,73]),{51:[1,104]},{51:[1,105]},{51:[1,106]},o($VK,[2,101]),o($VK,[2,102]),o($VK,[2,103]),o($VK,[2,104]),o($VK,[2,105]),o($VK,[2,106]),o($Vw,[2,95]),{64:55,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv},o($Vw,[2,100]),{24:[1,107]},{24:[1,108]},{7:109,9:[1,110],17:11,18:12,19:13,20:14,21:15,33:$V5,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},{7:111,9:[1,112],17:11,18:12,19:13,20:14,21:15,33:$V5,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},{16:[1,113]},{24:[1,114]},o($Vh,[2,11]),o($Vz,[2,45]),{23:$VE,28:115,33:[1,116],37:$VF,38:$VG,39:$VH,47:[1,118],52:117,62:92},{17:121,24:[1,119],40:122,41:$V9,42:$Va,43:$Vb,44:$Vc,53:120},o($VC,[2,46],{49:$VD}),o($VL,$VA),{38:[1,124],50:[1,123]},o($Vw,[2,67],{63:125,47:$VM,58:$VN,60:$VO,61:$VP}),o($Vw,[2,68],{63:131,23:[1,130],47:$VM,58:$VN,60:$VO,61:$VP}),o($Vw,[2,69]),{33:[1,132]},o($VQ,[2,37]),o($VQ,[2,38]),o($VQ,[2,39]),o($Vz,[2,81],{63:133,47:$VM,58:$VN,60:$VO,61:$VP}),{23:$VE,28:136,33:$VR,37:$VF,38:$VG,39:$VH,62:134},o($Vw,[2,92],{65:25,66:26,67:27,20:137,33:$Vx,68:$Vd,69:$Ve,70:$Vf}),o($Vw,[2,94],{65:25,66:26,67:27,20:138,33:$Vx,68:$Vd,69:$Ve,70:$Vf}),{24:[1,139]},{9:[2,62]},{24:[2,63],54:[1,140]},{24:[2,64],54:[1,141]},o($Vw,[2,79]),o($VJ,[2,77]),o($Vw,[2,80]),o($VJ,[2,78]),o($VJ,[2,74]),o($VJ,[2,75]),o($VJ,[2,76]),{15:[1,142]},{15:[1,143]},{19:145,24:[1,146],33:[1,144],57:24},{24:[1,148],33:[1,147]},{19:150,24:[1,151],33:[1,149],57:24},{19:152,24:[1,153],33:[1,154],57:24},{34:[1,155]},{15:[1,156]},o($Vz,[2,51],{63:125,47:$VM,58:$VN,60:$VO,61:$VP}),o($Vz,[2,52],{63:131,47:$VM,58:$VN,60:$VO,61:$VP}),o($Vz,[2,53]),{33:[1,157]},{9:[1,159],15:[1,158]},{24:[1,160]},{24:[2,59],54:[1,161]},{33:$VB,45:50,47:$Vj,48:53},o($VL,[2,49]),{50:[1,162]},{28:163,37:$VF,38:$VG,39:$VH},o($VS,[2,87]),o($VS,[2,88]),o($VS,[2,89]),o($VS,[2,90]),{33:[1,164]},{28:166,33:[1,165],37:$VF,38:$VG,39:$VH},o($Vw,[2,70]),{23:$VE,28:136,33:$VR,37:$VF,38:$VG,39:$VH,52:167,62:92},{24:[1,168]},{47:$VM,58:$VN,60:$VO,61:$VP,63:131},{47:$VM,58:$VN,60:$VO,61:$VP,63:125},o($Vw,[2,91]),o($Vw,[2,93]),{9:[2,61]},{28:99,33:$VI,37:$VF,38:$VG,39:$VH,55:169},{28:99,33:$VI,37:$VF,38:$VG,39:$VH,55:170},{6:171,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},{6:172,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},{24:[1,173],47:$Vk,51:$Vl,56:54,58:$Vm,59:$Vn,60:$Vo,61:$Vp},{24:[1,174]},{6:175,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},{24:[1,176]},{6:177,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},{24:[1,178],47:$Vk,51:$Vl,56:54,58:$Vm,59:$Vn,60:$Vo,61:$Vp},{24:[1,179]},{6:180,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},{24:[1,181]},{6:182,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},{47:$Vk,51:$Vl,56:54,58:$Vm,59:$Vn,60:$Vo,61:$Vp},{23:[1,183]},{26:184,27:$VT,30:186,31:$VU},o($Vz,[2,54]),{4:188,6:3,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},o($Vi,[2,57]),{9:[1,190],15:[1,189]},{17:121,40:122,41:$V9,42:$Va,43:$Vb,44:$Vc,53:191},o($VL,[2,50]),o($VV,[2,86]),{24:[1,192]},o($VV,[2,84]),o($VV,[2,85]),o($Vz,[2,82]),o($VV,[2,83]),{24:[2,65]},{24:[2,66]},{16:[1,193]},{16:[1,194]},{6:195,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},{6:196,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},o($Vh,[2,28]),{6:197,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},o($Vh,[2,30]),{6:198,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},{6:199,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},o($Vh,[2,33]),{6:200,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},o($Vh,[2,35]),{20:201,33:$Vx,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},{16:[1,202]},{28:203,37:$VF,38:$VG,39:$VH},{16:[2,22]},{29:[1,204]},{6:36,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,16:[1,205],17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},{4:206,6:3,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},o($Vi,[2,58]),{24:[2,60]},o($Vw,[2,71]),o($Vh,[2,19],{25:[1,207]}),o($Vh,[2,25]),o($Vh,[2,26]),o($Vh,[2,27]),o($Vh,[2,29]),o($Vh,[2,31]),o($Vh,[2,32]),o($Vh,[2,34]),{24:[1,208]},o($Vh,[2,24]),{29:[1,209]},{6:210,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},o($Vi,[2,55]),{6:36,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,16:[1,211],17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},{6:212,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},{9:[1,213]},{6:214,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,57:24,65:25,66:26,67:27,68:$Vd,69:$Ve,70:$Vf},{16:[2,23]},o($Vi,[2,56]),o($Vh,[2,18]),o($Vh,[2,36]),{16:[2,20],26:215,27:$VT,30:186,31:$VU},{16:[2,21]}],
defaultActions: {35:[2,1],97:[2,62],139:[2,61],169:[2,65],170:[2,66],186:[2,22],191:[2,60],210:[2,23],215:[2,21]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignorar */
break;
case 1:return 41;
break;
case 2:return 42;
break;
case 3:return 43;
break;
case 4:return 44;
break;
case 5:return 47;
break;
case 6:return 60;
break;
case 7:return 61;
break;
case 8:return 58;
break;
case 9:return 54;
break;
case 10:return 9;
break;
case 11:return 29;
break;
case 12:return '.';
break;
case 13:return 'QUOTE';
break;
case 14:return 'DQUOTE';
break;
case 15:return 23;
break;
case 16:return 24;
break;
case 17:return 49;
break;
case 18:return 50;
break;
case 19:return 15;
break;
case 20:return 16;
break;
case 21:return 77;
break;
case 22:return 76;
break;
case 23:return 51;
break;
case 24:return 72;
break;
case 25:return 73;
break;
case 26:return 74;
break;
case 27:return 75;
break;
case 28:return 68;
break;
case 29:return 69;
break;
case 30:return 70;
break;
case 31:return 22;
break;
case 32:return 32;
break;
case 33:return 27;
break;
case 34:return 8;
break;
case 35:return 31;
break;
case 36:return 25;
break;
case 37:return 34;
break;
case 38:return 36;
break;
case 39:return 35;
break;
case 40:return 'VAR';
break;
case 41:return '#';
break;
case 42:return 'DEFINE';
break;
case 43:return 33;
break;
case 44:return 37;
break;
case 45:return 38;
break;
case 46:return 39;
break;
case 47:console.log('Erro léxico: caractere [', yy_.yytext, '] não reconhecido.');
break;
case 48:console.log('Token EOF'); return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:\*)/,/^(?:\+)/,/^(?:-)/,/^(?:\/)/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:')/,/^(?:")/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:< )/,/^(?:> )/,/^(?:= )/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:if\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:(?:\w+\s+)([a-zA-Z_][a-zA-Z0-9_]*))/,/^(?:#)/,/^(?:define\b)/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:[0-9]*\.[0-9]+([eE][+-][0-9]+)?)/,/^(?:[0-9]+)/,/^(?:'[a-zA-Z0-9_]')/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = C_Compiler_parte1_parte2;
exports.Parser = C_Compiler_parte1_parte2.Parser;
exports.parse = function () { return C_Compiler_parte1_parte2.parse.apply(C_Compiler_parte1_parte2, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}