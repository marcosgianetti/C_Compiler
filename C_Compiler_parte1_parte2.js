/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var C_Compiler_parte1_parte2 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,6],$V2=[1,21],$V3=[1,16],$V4=[1,20],$V5=[1,23],$V6=[1,17],$V7=[1,18],$V8=[1,19],$V9=[1,28],$Va=[1,29],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[1,33],$Vf=[1,34],$Vg=[5,8,10,15,16,22,32,33,34,35,36,41,42,43,44,64,65,66],$Vh=[5,8,10,15,16,22,27,31,32,33,34,35,36,41,42,43,44,64,65,66],$Vi=[5,8,9,10,15,16,22,24,27,31,32,33,34,35,36,41,42,43,44,64,65,66],$Vj=[1,53],$Vk=[1,56],$Vl=[1,54],$Vm=[1,55],$Vn=[1,57],$Vo=[1,58],$Vp=[1,59],$Vq=[1,60],$Vr=[1,61],$Vs=[1,62],$Vt=[1,63],$Vu=[1,64],$Vv=[1,65],$Vw=[9,24],$Vx=[1,67],$Vy=[2,44],$Vz=[1,76],$VA=[1,85],$VB=[1,86],$VC=[1,87],$VD=[1,88],$VE=[1,93],$VF=[23,33,37,38,39,49],$VG=[33,37,38,39],$VH=[1,115],$VI=[1,120],$VJ=[1,121],$VK=[1,123],$VL=[9,24,47,48],$VM=[1,124],$VN=[1,125],$VO=[9,24,47,48,49,50],$VP=[2,89],$VQ=[9,24,29,33,47,48,49,50,52,64,65,66],$VR=[9,24,52],$VS=[1,147],$VT=[1,148],$VU=[1,149],$VV=[1,150],$VW=[1,151],$VX=[1,152],$VY=[1,153],$VZ=[1,154],$V_=[1,184],$V$=[1,186];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"corpo":3,"statements":4,"EOF":5,"statement":6,"exp_stmt":7,"BREAK":8,";":9,"CONTINUE":10,"if_stmt":11,"loop_stmt":12,"switch_stmt":13,"statement_composto":14,"{":15,"}":16,"declaracao_variavel":17,"declaracao_funcao":18,"expressao_atribuicao":19,"expressao_condicional":20,"chamada_funcao":21,"IF":22,"(":23,")":24,"ELSE":25,"cases":26,"CASE":27,"valor_lit":28,":":29,"default_stmt":30,"DEFAULT":31,"SWITCH":32,"IDF":33,"WHILE":34,"FOR":35,"DO":36,"F_LIT":37,"INT_LIT":38,"CHAR_LIT":39,"tipo_var":40,"INT":41,"DOUBLE":42,"FLOAT":43,"CHAR":44,"=":45,"operacao_aritmetica":46,"+":47,"-":48,"*":49,"/":50,"definicao_parametros":51,",":52,"passagem_parametros":53,"operador_atribuicao":54,"expressao_aritmetica":55,"expressao_in_decrement":56,"%":57,"termo":58,"fator":59,"operador_relacional":60,"operacao_and":61,"operacao_or":62,"operacao_not":63,"AND":64,"OR":65,"NOT":66,"expressao_logica":67,"LE":68,"GE":69,"EQ":70,"NE":71,">":72,"<":73,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"BREAK",9:";",10:"CONTINUE",15:"{",16:"}",22:"IF",23:"(",24:")",25:"ELSE",27:"CASE",29:":",31:"DEFAULT",32:"SWITCH",33:"IDF",34:"WHILE",35:"FOR",36:"DO",37:"F_LIT",38:"INT_LIT",39:"CHAR_LIT",41:"INT",42:"DOUBLE",43:"FLOAT",44:"CHAR",45:"=",47:"+",48:"-",49:"*",50:"/",52:",",57:"%",64:"AND",65:"OR",66:"NOT",67:"expressao_logica",68:"LE",69:"GE",70:"EQ",71:"NE",72:">",73:"<"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[14,3],[14,2],[7,2],[7,1],[7,2],[7,2],[7,2],[11,9],[11,7],[26,4],[26,5],[26,1],[30,3],[13,7],[12,7],[12,7],[12,7],[12,6],[12,7],[12,6],[12,7],[12,7],[12,6],[12,7],[12,6],[12,9],[28,1],[28,1],[28,1],[40,1],[40,1],[40,1],[40,1],[17,2],[17,4],[17,4],[17,4],[17,4],[17,4],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[18,7],[18,8],[18,5],[18,6],[51,1],[51,3],[21,4],[21,3],[53,1],[53,1],[53,3],[53,3],[19,3],[19,4],[19,3],[19,1],[54,1],[54,2],[54,2],[54,2],[54,2],[54,2],[56,3],[56,3],[55,1],[55,3],[55,3],[58,1],[58,3],[58,3],[59,1],[59,1],[59,3],[20,4],[20,3],[20,4],[20,3],[20,2],[20,1],[20,1],[61,1],[62,1],[63,2],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log(1)
break;
case 5:
console.log('Break Statement')
break;
case 6:
console.log('Continue Statement')
break;
case 9:
console.log('SWITCH Statement')
break;
case 11: case 12:
console.log('COMPOSTO')
break;
case 13:
console.log('Declaração de variável')
break;
case 14:
console.log('Declaração de função')
break;
case 15:
console.log('Atribuição de valor')
break;
case 16:
console.log('Expressao condicional')
break;
case 17:
console.log('Chamada de função')
break;
case 18:
console.log('IF ELSE')
break;
case 19:
console.log('IF')
break;
case 20:
console.log('Case Statement Simples')
break;
case 21:
console.log('Case Statement Multiplo')
break;
case 22:
console.log('Default')
break;
case 25:
console.log('WHILE Statement')
break;
case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35:
console.log('FOR Statement')
break;
case 36:
console.log('DO WHILE statement')
break;
case 44:
criarVariavel($$[$0-1], $$[$0], 'Null', 'Null')
break;
case 45:
criarVariavel($$[$0-3], $$[$0-2], parseFloat($$[$0]), true)
break;
case 46:
criarVariavel($$[$0-3], $$[$0-2], parseInt($$[$0]), true)
break;
case 47:
criarVariavel($$[$0-3], $$[$0-2], $$[$0], true)
break;
case 49:
criarVariavel($$[$0-3], $$[$0-2], $$[$0], false)
break;
case 50:
criarVariavel($$[$0-5], $$[$0-4], parseInt($$[$0-2])+parseInt($$[$0]), true)
break;
case 51:
criarVariavel($$[$0-5], $$[$0-4], parseInt($$[$0-2])-parseInt($$[$0]), true)
break;
case 52:
criarVariavel($$[$0-5], $$[$0-4], parseInt($$[$0-2])*parseInt($$[$0]), true)
break;
case 53:
criarVariavel($$[$0-5], $$[$0-4], parseInt($$[$0-2])/parseInt($$[$0]), true)
break;
case 54:
criarVariavel($$[$0-5], $$[$0-4], parseFloat($$[$0-2])+parseFloat($$[$0]), true)
break;
case 55:
criarVariavel($$[$0-5], $$[$0-4], parseFloat($$[$0-2])-parseFloat($$[$0]), true)
break;
case 56:
criarVariavel($$[$0-5], $$[$0-4], parseFloat($$[$0-2])*parseFloat($$[$0]), true)
break;
case 57:
criarVariavel($$[$0-5], $$[$0-4], parseFloat($$[$0-2])/parseFloat($$[$0]), true)
break;
case 81:
console.log('Incremento ++')
break;
case 82:
console.log('Decremento --')
break;
case 107:
console.log('Operador relacional')
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},{1:[3]},{5:[1,35],6:36,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},o($Vg,[2,3]),o($Vh,[2,4]),{9:[1,37]},{9:[1,38]},o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),{9:[1,39]},o($Vi,[2,14]),{9:[1,40]},{9:[1,41]},{9:[1,42]},{23:[1,43]},{23:[1,44]},{23:[1,45]},{15:[1,46]},{23:[1,47]},{4:48,6:3,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,16:[1,49],17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},{33:[1,50]},{23:$Vj,45:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,54:51,57:$Vp,60:52,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv},o($Vw,[2,74]),{20:66,33:$Vx,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},o($Vw,[2,97]),o($Vw,[2,98]),{33:[2,40]},{33:[2,41]},{33:[2,42]},{33:[2,43]},o([33,64,65,66],[2,99]),o($Vw,[2,100]),{67:[1,68]},{1:[2,1]},o($Vg,[2,2]),o($Vh,[2,5]),o($Vh,[2,6]),o($Vi,[2,13]),o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),{20:69,33:$Vx,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},{20:70,33:$Vx,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},{7:71,9:[1,72],17:11,18:12,19:13,20:14,21:15,33:$V5,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},{6:73,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},{33:[1,74]},{6:36,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,16:[1,75],17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},o($Vh,[2,12]),{9:$Vy,23:[1,77],45:$Vz},{21:80,23:$VA,28:84,33:[1,82],37:$VB,38:$VC,39:$VD,49:[1,79],55:78,58:81,59:83},{28:90,33:[1,89],37:$VB,38:$VC,39:$VD},{24:[1,92],28:94,33:$VE,37:$VB,38:$VC,39:$VD,53:91},{45:[1,96],47:[1,95]},{45:[1,98],48:[1,97]},o($VF,[2,75]),{45:[1,99]},{45:[1,100]},{45:[1,101]},o($VG,[2,102]),o($VG,[2,103]),o($VG,[2,104]),o($VG,[2,105]),o($VG,[2,106]),o($VG,[2,107]),o($Vw,[2,96]),{60:52,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv},o($Vw,[2,101]),{24:[1,102]},{24:[1,103]},{7:104,9:[1,105],17:11,18:12,19:13,20:14,21:15,33:$V5,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},{7:106,9:[1,107],17:11,18:12,19:13,20:14,21:15,33:$V5,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},{16:[1,108]},{24:[1,109]},o($Vh,[2,11]),{23:$VH,33:[1,114],37:[1,110],38:[1,111],39:[1,112],46:113},{17:118,24:[1,116],40:119,41:$V9,42:$Va,43:$Vb,44:$Vc,51:117},o($Vw,[2,71],{47:$VI,48:$VJ}),{23:$VA,28:84,33:$VK,37:$VB,38:$VC,39:$VD,55:122,58:81,59:83},o($Vw,[2,73]),o($VL,[2,83],{49:$VM,50:$VN}),o($VO,$VP,{23:$Vj}),o($VO,[2,86]),o($VO,[2,90]),{23:$VA,28:84,33:$VK,37:$VB,38:$VC,39:$VD,55:126,58:81,59:83},o($VQ,[2,37]),o($VQ,[2,38]),o($VQ,[2,39]),o($Vw,[2,93],{61:25,62:26,63:27,20:127,33:$Vx,64:$Vd,65:$Ve,66:$Vf}),o($Vw,[2,95],{61:25,62:26,63:27,20:128,33:$Vx,64:$Vd,65:$Ve,66:$Vf}),{24:[1,129]},o($Vw,[2,66]),{24:[2,67],52:[1,130]},{24:[2,68],52:[1,131]},o($Vw,[2,81]),o($VF,[2,79]),o($Vw,[2,82]),o($VF,[2,80]),o($VF,[2,76]),o($VF,[2,77]),o($VF,[2,78]),{15:[1,132]},{15:[1,133]},{19:135,24:[1,136],33:[1,134],56:24},{24:[1,138],33:[1,137]},{19:140,24:[1,141],33:[1,139],56:24},{19:142,24:[1,143],33:[1,144],56:24},{34:[1,145]},{15:[1,146]},o($VR,[2,45],{47:$VS,48:$VT,49:$VU,50:$VV}),o($VR,[2,46],{47:$VW,48:$VX,49:$VY,50:$VZ}),o($VR,[2,47]),o($VR,[2,48]),o($VR,[2,49]),{23:$VH,37:[1,157],38:[1,156],46:155},{9:[1,159],15:[1,158]},{24:[1,160]},{24:[2,63],52:[1,161]},{33:[1,162]},{23:$VA,28:84,33:$VK,37:$VB,38:$VC,39:$VD,58:163,59:83},{23:$VA,28:84,33:$VK,37:$VB,38:$VC,39:$VD,58:164,59:83},o($Vw,[2,72],{47:$VI,48:$VJ}),o($VO,$VP),{23:$VA,28:84,33:$VK,37:$VB,38:$VC,39:$VD,59:165},{23:$VA,28:84,33:$VK,37:$VB,38:$VC,39:$VD,59:166},{24:[1,167],47:$VI,48:$VJ},o($Vw,[2,92]),o($Vw,[2,94]),o($Vw,[2,65]),{28:94,33:$VE,37:$VB,38:$VC,39:$VD,53:168},{28:94,33:$VE,37:$VB,38:$VC,39:$VD,53:169},{6:170,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},{6:171,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},{24:[1,172],45:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,54:51,57:$Vp},{24:[1,173]},{6:174,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},{24:[1,175]},{6:176,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},{24:[1,177],45:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,54:51,57:$Vp},{24:[1,178]},{6:179,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},{24:[1,180]},{6:181,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},{45:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,54:51,57:$Vp},{23:[1,182]},{26:183,27:$V_,30:185,31:$V$},{37:[1,187]},{37:[1,188]},{37:[1,189]},{37:[1,190]},{38:[1,191]},{38:[1,192]},{38:[1,193]},{38:[1,194]},{24:[1,195]},{47:$VW,48:$VX,49:$VY,50:$VZ},{47:$VS,48:$VT,49:$VU,50:$VV},{4:196,6:3,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},o($Vi,[2,61]),{9:[1,198],15:[1,197]},{17:118,40:119,41:$V9,42:$Va,43:$Vb,44:$Vc,51:199},o([24,52],$Vy,{45:$Vz}),o($VL,[2,84],{49:$VM,50:$VN}),o($VL,[2,85],{49:$VM,50:$VN}),o($VO,[2,87]),o($VO,[2,88]),o($VO,[2,91]),{24:[2,69]},{24:[2,70]},{16:[1,200]},{16:[1,201]},{6:202,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},{6:203,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},o($Vh,[2,28]),{6:204,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},o($Vh,[2,30]),{6:205,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},{6:206,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},o($Vh,[2,33]),{6:207,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},o($Vh,[2,35]),{20:208,33:$Vx,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},{16:[1,209]},{28:210,37:$VB,38:$VC,39:$VD},{16:[2,22]},{29:[1,211]},o($VR,[2,54]),o($VR,[2,55]),o($VR,[2,56]),o($VR,[2,57]),o($VR,[2,50]),o($VR,[2,51]),o($VR,[2,52]),o($VR,[2,53]),o($VR,[2,58]),{6:36,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,16:[1,212],17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},{4:213,6:3,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},o($Vi,[2,62]),{24:[2,64]},o($Vh,[2,19],{25:[1,214]}),o($Vh,[2,25]),o($Vh,[2,26]),o($Vh,[2,27]),o($Vh,[2,29]),o($Vh,[2,31]),o($Vh,[2,32]),o($Vh,[2,34]),{24:[1,215]},o($Vh,[2,24]),{29:[1,216]},{6:217,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},o($Vi,[2,59]),{6:36,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,16:[1,218],17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},{6:219,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},{9:[1,220]},{6:221,7:4,8:$V0,10:$V1,11:7,12:8,13:9,14:10,15:$V2,17:11,18:12,19:13,20:14,21:15,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:22,41:$V9,42:$Va,43:$Vb,44:$Vc,56:24,61:25,62:26,63:27,64:$Vd,65:$Ve,66:$Vf},{16:[2,23]},o($Vi,[2,60]),o($Vh,[2,18]),o($Vh,[2,36]),{16:[2,20],26:222,27:$V_,30:185,31:$V$},{16:[2,21]}],
defaultActions: {28:[2,40],29:[2,41],30:[2,42],31:[2,43],35:[2,1],168:[2,69],169:[2,70],185:[2,22],199:[2,64],217:[2,23],222:[2,21]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    var escopoAtual = 0;
    var tabelaSimbolos = [];
    var tac = [];
    var erros = [];

    
    function criarVariavel(tipo, nome, valor, isLiteral){
    	if(!isLiteral){
    		tabelaSimbolos.map((dictAtual) => {
    			if (dictAtual.id == valor){
    				tabelaSimbolos.push({ tipo: tipo, id: nome, val: dictAtual.val, escopo:escopoAtual});
    			}
    		})
    	} else {
        tabelaSimbolos.push({ tipo: tipo, id: nome, val: valor, escopo:escopoAtual});
        }
        console.log(tabelaSimbolos)
    }
    
    function atribuirValor(nome, valor){

    }

    function somaEscopo(){
    	escopoAtual++
    }

    function subtraiEscopo(){
    	escopoAtual--
    }
   
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignorar */
break;
case 1:return 41;
break;
case 2:return 42;
break;
case 3:return 43;
break;
case 4:return 44;
break;
case 5:return 49;
break;
case 6:return 47;
break;
case 7:return 48;
break;
case 8:return 50;
break;
case 9:return 52;
break;
case 10:return 9;
break;
case 11:return 29;
break;
case 12:return '.';
break;
case 13:return 'QUOTE';
break;
case 14:return 'DQUOTE';
break;
case 15:return 23;
break;
case 16:return 24;
break;
case 17:return '[';
break;
case 18:return ']';
break;
case 19:return 15;
break;
case 20:return 16;
break;
case 21:return 73;
break;
case 22:return 72;
break;
case 23:return 45;
break;
case 24:return 68;
break;
case 25:return 69;
break;
case 26:return 70;
break;
case 27:return 71;
break;
case 28:return 64;
break;
case 29:return 65;
break;
case 30:return 66;
break;
case 31:return 22;
break;
case 32:return 32;
break;
case 33:return 27;
break;
case 34:return 8;
break;
case 35:return 31;
break;
case 36:return 25;
break;
case 37:return 34;
break;
case 38:return 36;
break;
case 39:return 35;
break;
case 40:return 'VAR';
break;
case 41:return '#';
break;
case 42:return 'DEFINE';
break;
case 43:return 33;
break;
case 44:return 37;
break;
case 45:return 38;
break;
case 46:return 39;
break;
case 47:console.log('Erro léxico: caractere [', yy_.yytext, '] não reconhecido.');
break;
case 48:console.log('Token EOF'); return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:\*)/,/^(?:\+)/,/^(?:-)/,/^(?:\/)/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:')/,/^(?:")/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:< )/,/^(?:> )/,/^(?:=)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:if\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:(?:\w+\s+)([a-zA-Z_][a-zA-Z0-9_]*))/,/^(?:#)/,/^(?:define\b)/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:[0-9]*\.[0-9]+([eE][+-][0-9]+)?)/,/^(?:[0-9]+)/,/^(?:'[a-zA-Z0-9_]')/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = C_Compiler_parte1_parte2;
exports.Parser = C_Compiler_parte1_parte2.Parser;
exports.parse = function () { return C_Compiler_parte1_parte2.parse.apply(C_Compiler_parte1_parte2, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}